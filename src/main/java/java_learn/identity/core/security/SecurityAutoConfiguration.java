package java_learn.identity.core.security;

import java_learn.identity.core.security.models.JwtProperties;
import java_learn.identity.core.security.service.JWTTokenService;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import java_learn.identity.core.security.models.SecurityProperties;
/*
* Class n√†y s·∫Ω ƒë∆∞·ª£c Spring Boot t·ª± ƒë·ªông n·∫°p khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông (n·∫øu tho·∫£ ƒëi·ªÅu ki·ªán).
Th∆∞·ªùng d√πng trong module core / library ƒë·ªÉ c·∫•u h√¨nh s·∫µn c√°c bean chung (gi·ªëng nh∆∞ spring-boot-starter-security c·ªßa Spring).
* */
@AutoConfiguration
/*
Ch·ªâ k√≠ch ho·∫°t class n√†y n·∫øu class JwtDecoder t·ªìn t·∫°i trong classpath.
* */
@ConditionalOnClass(JwtDecoder.class)
/*Cho ph√©p Spring Boot bind gi√° tr·ªã trong file application.yml ho·∫∑c application.properties*/
@EnableConfigurationProperties({JwtProperties.class, SecurityProperties.class})

/*
* Spring Boot s·∫Ω t·ª± ƒë·ªông qu√©t to√†n b·ªô package java_learn.identity ƒë·ªÉ t√¨m:
C√°c @Component, @Service, @Repository, @Controller
C√°c c·∫•u h√¨nh kh√°c (@Configuration, @RestController, v.v.)
üëâ ƒêi·ªÅu n√†y gi√∫p b·∫°n gom t·∫•t c·∫£ bean li√™n quan ƒë·∫øn b·∫£o m·∫≠t v√†o core package v√† t·ª± ƒë·ªông load ch√∫ng khi import module n√†y.
* */
@ComponentScan(basePackages = "java_learn.identity")
@Import({
        JWTTokenService.class,
        SecurityConfiguration.class
})
public class SecurityAutoConfiguration {
}
