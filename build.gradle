plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'   // cài đặt spot less để định dạng code
	id "org.sonarqube" version "5.0.0.4638"
}

group = 'java-learn'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}
// ================== GLOBAL VARIABLES ==================
ext {
	set('mapstructVersion', "1.5.5.Final")
}
repositories {
	mavenCentral()
}

dependencies {

	// ==== su dung jpa (cho tang repo) JPA / Hibernate (Repository)
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// ==== REST API, Controller, JSON
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// ==== Bean Validation (@Valid, @NotNull, ...)
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//MySQL driver
	runtimeOnly 'com.mysql:mysql-connector-j'

	// === Object Mapping (DTO <-> Entity)
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	// ==== API Documentation (Swagger / OpenAPI) ====
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// ===== Spring Security =====
	// Spring Boot tự động load SecurityAutoConfiguration bên trong starter
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// ====  OAuth2 JWT
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	// ==== ==== Lombok (reduce boilerplate code) ====
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// Kết hợp Lombok + MapStruct
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	// ==== Unit Test ====
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// ==== Unit Test
	implementation 'org.springframework.boot:spring-boot-starter-test'

	// ==== Spring Security Test (QUAN TRỌNG: cung cấp @WithMockUser) ====
	testImplementation 'org.springframework.security:spring-security-test'
}

// ================== TEST CONFIG ==================
tasks.named('test') {
	useJUnitPlatform()
}

spotless {
	java {
		target 'src/**/*.java'    // Áp dụng cho toàn bộ file Java
		googleJavaFormat()        // Dùng chuẩn format của Google
		// hoặc dùng Eclipse style:
		// eclipse().configFile('config/eclipse-java-format.xml')
	}
}

// ================== SONARQUBE CONFIG ==================
sonar {
	properties {
		property "sonar.projectKey", "identity"
		property "sonar.projectName", "identity"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.token", "sqp_7a170a840a6e4825736d7f106440841e7ffb6e31"
		property "sonar.java.source", "17"
		property "sonar.java.binaries", "build/classes"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.junit.reportPaths", "build/test-results/test"

		// Bỏ qua warning của MapStruct
		property "sonar.issue.ignore.multicriteria", "e1"
		property "sonar.issue.ignore.multicriteria.e1.ruleKey", "squid:S4604"
		property "sonar.issue.ignore.multicriteria.e1.resourceKey", "**/*Mapper.java"
	}
}